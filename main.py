import argparse
import time
import os
import csv
from datetime import datetime
import pickle

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø–∞—Ä—Å–µ—Ä–æ–≤
from parsers.youtube_parser import parse_youtube_shorts
from parsers.tiktok_parser import parse_tiktok
from parsers.instagram_parser import parse_instagram_reels
from parsers.vk_parser import parse_vk_clips

# –£—Ç–∏–ª–∏—Ç—ã
from utils.viral_metrics import calculate_viral_score
from utils.storage import save_to_csv, load_previous_data
from utils.browser import setup_driver, save_cookies

def setup_auth_session():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies"""
    platforms = {
        "youtube": "https://www.youtube.com",
        "tiktok": "https://www.tiktok.com",
        "instagram": "https://www.instagram.com",
        "vk": "https://vk.com"
    }
    
    print("=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è cookies
    os.makedirs("cookies", exist_ok=True)
    
    for platform, url in platforms.items():
        choice = input(f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {platform}? (y/n): ")
        if choice.lower() == 'y':
            driver = None
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –≤–∏–¥–∏–º—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
                driver = setup_driver(headless=False)
                if not driver:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è {platform}")
                    continue
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                print(f"–û—Ç–∫—Ä—ã–≤–∞—é {platform}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!")
                driver.get(url)
                
                # –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                input(f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ {platform}, –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies
                save_cookies(driver, platform)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {platform}: {e}")
            
            finally:
                if driver:
                    driver.quit()
    
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def main():
    parser = argparse.ArgumentParser(description='–ü–∞—Ä—Å–µ—Ä –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ')
    parser.add_argument('--query', type=str, required=True, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º–∞—Ç–∏–∫–∞')
    parser.add_argument('--limit', type=int, default=20, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è —Å–±–æ—Ä–∞ —Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
    parser.add_argument('--platforms', type=str, default='all', 
                      help='–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (youtube,tiktok,instagram,vk –∏–ª–∏ all)')
    parser.add_argument('--visualize', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--setup-auth', action='store_true', help='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.setup_auth:
        setup_auth_session()
        return
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{args.query}'")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("data", exist_ok=True)
    os.makedirs("data/history", exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Å–±–æ—Ä–∞
    available_platforms = {
        'youtube': parse_youtube_shorts,
        'tiktok': parse_tiktok,
        'instagram': parse_instagram_reels,
        'vk': parse_vk_clips
    }
    
    selected_platforms = {}
    if args.platforms == 'all':
        selected_platforms = available_platforms
    else:
        platform_list = args.platforms.lower().split(',')
        for platform in platform_list:
            if platform in available_platforms:
                selected_platforms[platform] = available_platforms[platform]
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    all_results = []
    
    for platform_name, parse_func in selected_platforms.items():
        print(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å {platform_name}...")
        start_time = time.time()
        
        try:
            platform_results = parse_func(args.query, args.limit)
            all_results.extend(platform_results)
            print(f"–°–æ–±—Ä–∞–Ω–æ {len(platform_results)} –≤–∏–¥–µ–æ —Å {platform_name}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Å {platform_name}: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        time.sleep(2)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    previous_data = load_previous_data(args.query)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
    if all_results:
        results_with_metrics = calculate_viral_score(all_results, previous_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"data/viral_videos_{args.query.replace(' ', '_')}_{timestamp}.csv"
        save_to_csv(results_with_metrics, filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        history_filename = f"data/history/viral_videos_{args.query.replace(' ', '_')}_{timestamp}.csv"
        save_to_csv(results_with_metrics, history_filename)
        
        print(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(results_with_metrics)} –≤–∏–¥–µ–æ —Å–æ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        print("\n–¢–æ–ø-10 —Å–∞–º—ã—Ö –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ:")
        for i, item in enumerate(results_with_metrics[:10], 1):
            title = item.get('title', '')
            if isinstance(title, str) and len(title) > 40:
                title = title[:37] + "..."
                
            print(f"{i}. [{item.get('platform')}] {title}")
            print(f"   üëÅÔ∏è {item.get('views', 'N/A')} | üëç {item.get('likes', 'N/A')} | üí¨ {item.get('comments', 'N/A')}")
            print(f"   URL: {item.get('url', 'N/A')}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if args.visualize:
            try:
                from visualization.dashboard import generate_dashboard
                dashboard_file = generate_dashboard(results_with_metrics, args.query)
                print(f"\n–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {dashboard_file}")
            except ImportError:
                print("\n–î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è matplotlib –∏ seaborn. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö: pip install matplotlib seaborn")
            except Exception as e:
                print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

if __name__ == "__main__":
    main()