import argparse
import time
import os
import csv
import webbrowser
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ YouTube –ø–∞—Ä—Å–µ—Ä–∞, —Ç.–∫. –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
from parsers.youtube_parser import parse_youtube_shorts

# –£—Ç–∏–ª–∏—Ç—ã
from utils.viral_metrics import calculate_viral_score
from utils.storage import save_to_csv, load_previous_data

def main():
    parser = argparse.ArgumentParser(description='–ü–∞—Ä—Å–µ—Ä –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ')
    parser.add_argument('--query', type=str, required=True, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º–∞—Ç–∏–∫–∞')
    parser.add_argument('--limit', type=int, default=200, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –¥–ª—è —Å–±–æ—Ä–∞')
    parser.add_argument('--days', type=int, default=30, help='–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π')
    parser.add_argument('--visualize', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    print(f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{args.query}' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("data", exist_ok=True)
    os.makedirs("data/history", exist_ok=True)
    os.makedirs("visualization/output", exist_ok=True)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å YouTube
    all_results = []
    
    print(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å YouTube Shorts...")
    start_time = time.time()
    
    try:
        youtube_results = parse_youtube_shorts(args.query, args.limit, args.days)
        all_results.extend(youtube_results)
        elapsed = time.time() - start_time
        print(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è–ª {elapsed:.2f} —Å–µ–∫—É–Ω–¥. –°–æ–±—Ä–∞–Ω–æ {len(youtube_results)} –≤–∏–¥–µ–æ —Å YouTube Shorts")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö —Å YouTube Shorts: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    previous_data = load_previous_data(args.query)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
    if all_results:
        results_with_metrics = calculate_viral_score(all_results, previous_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"data/viral_videos_{args.query.replace(' ', '_')}_{timestamp}.csv"
        save_to_csv(results_with_metrics, filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ø–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        history_filename = f"data/history/viral_videos_{args.query.replace(' ', '_')}_{timestamp}.csv"
        save_to_csv(results_with_metrics, history_filename)
        
        print(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(results_with_metrics)} –≤–∏–¥–µ–æ —Å YouTube Shorts")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        print("\n–¢–æ–ø-10 —Å–∞–º—ã—Ö –≤–∏—Ä–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ:")
        for i, item in enumerate(results_with_metrics[:min(10, len(results_with_metrics))], 1):
            title = item.get('title', '')
            if isinstance(title, str) and len(title) > 40:
                title = title[:37] + "..."
                
            print(f"{i}. [{item.get('platform')}] {title}")
            print(f"   üëÅÔ∏è {item.get('views', 'N/A')} | üëç {item.get('likes', 'N/A')} | üí¨ {item.get('comments', 'N/A')}")
            print(f"   URL: {item.get('url', 'N/A')}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if args.visualize:
            try:
                from visualization.html_report import generate_html_report
                html_file = generate_html_report(results_with_metrics, args.query)
                if html_file:
                    print(f"\nHTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {html_file}")
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    webbrowser.open('file://' + os.path.abspath(html_file))
            except Exception as e:
                print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
                import traceback
                traceback.print_exc()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")

if __name__ == "__main__":
    main()